#include <iostream>

#include "gurobi_c++.h"
#include "gurobi_c.h"


using namespace std;

int main()
{
/*
  GRBenv *env;
  GRBloadenv(&env, NULL);
  
  GRBmodel *model;
  cout << GRBnewmodel(env, &model, NULL, 0, NULL, NULL, NULL, NULL, NULL) << '\n';  
  
  cout << GRBaddvar(model, 0, NULL, NULL, 0.0, 0.0, 1e20, GRB_CONTINUOUS, NULL) << '\n';
  int inds[1] = {0};
  double vals[1] = {1.0};

  //cout << GRBupdatemodel(model) << '\n';
  cout << GRBaddconstr(model, 1, inds, vals, GRB_LESS_EQUAL, 1.0, NULL) << '\n'; 
  GRBwrite(model, "test.lp");
*/
/*

  GRBEnv env;
  GRBModel model(env);
  
  GRBVar x = model.addVar(0, 1e20, -1, GRB_CONTINUOUS);
  GRBVar y = model.addVar(0, 1e20, -1, GRB_CONTINUOUS);
  
  GRBConstr con1 = model.addConstr(x - 2*y, GRB_GREATER_EQUAL, 0);

  model.set(GRB_IntParam_InfUnbdInfo, 1);
  
  
  model.optimize();
  cout << model.get(GRB_IntAttr_Status) << '\n';
  double xray = x.get(GRB_DoubleAttr_UnbdRay);
  double yray = y.get(GRB_DoubleAttr_UnbdRay);
  
  cout << xray << ' ' << yray << '\n';
  
  */
}

// g++ -D_GLIBCXX_USE_CXX11_ABI=0 test.cpp -I$GUROBI_HOME/include -L$GUROBI_HOME/lib -lgurobi_c++ -lgurobi70 -lm